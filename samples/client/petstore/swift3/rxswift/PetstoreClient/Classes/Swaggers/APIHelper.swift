// APIHelper.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

class APIHelper {
    static func rejectNil(_ source: [String:Any?]) -> [String:Any]? {
        let result = source.reduce([String:Any]()) { (dict, tuple:(key: String, value: Any?)) -> [String:Any] in
            guard let value = tuple.value else { return dict }
            var dict = dict
            dict.updateValue(value, forKey: tuple.key)
            return dict
        }
        
        if result.isEmpty { return nil }
        return result
    }
    
    static func rejectNilHeaders(_ source: [String:Any?]) -> [String:String] {
        let result = source.reduce([String:String]()) { (dict, tuple:(key: String, value: Any?)) -> [String:String] in
            guard let value = tuple.value else { return dict }
            var dict = dict
            dict.updateValue("\(value)", forKey: tuple.key)
            return dict
        }
        return result
    }

    static func convertBoolToString(_ source: [String: Any]?) -> [String:Any]? {
        guard let source = source else {
            return nil
        }
        var destination = [String:Any]()
        let theTrue = NSNumber(value: true as Bool)
        let theFalse = NSNumber(value: false as Bool)
        for (key, value) in source {
            switch value {
            case let x where x as? NSNumber === theTrue || x as? NSNumber === theFalse:
                destination[key] = "\(value as! Bool)" as Any?
            default:
                destination[key] = value
            }
        }
        return destination
    }
    
    static func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem]? {
        let returnValues = values.flatMap { (item: (key: String, value: Any?)) -> URLQueryItem? in
            guard let value = item.value else { return nil }
            return URLQueryItem(name: item.key, value:"\(value)")
        }
        if returnValues.isEmpty { return nil }
        return returnValues
    }
}
